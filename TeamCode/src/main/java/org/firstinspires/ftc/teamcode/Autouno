package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@Autonomous(name="autouno", group="autouno")

public class Autouno extends LinearOpMode {
    private DcMotor frontLeft;
    private DcMotor backLeft;
    private DcMotor frontRight;
    private DcMotor backRight;
    private DcMotor JimmysLimb;
    private CRServo serve;
    private CRServo oh;
    private ElapsedTime runtime = new ElapsedTime();
    public void forward(double speed, int tim){
        frontLeft.setPower(-speed);
        frontRight.setPower(-speed);
        backLeft.setPower(speed);
        backRight.setPower(speed);
        sleep(tim);
    }
    public void stop(int tim){
        frontLeft.setPower(0);
        frontRight.setPower(0);
        backLeft.setPower(0);
        backRight.setPower(0);
        sleep(tim);
    }
    public void strafe(double speed, int tim){
        frontLeft.setPower(-speed);
        frontRight.setPower(speed);
        backLeft.setPower(-speed);
        backRight.setPower(speed);
        sleep(tim);
    }
    public void section1(){
        forward(0.35, 100);
        stop(1000);
        strafe(-0.35, 1600);
        stop(1000);
        forward(0.35, 1200);
        stop(999999999);
    }
    public void section2(){
        JimmysLimb.setPower(0.5);
        sleep(100);
        JimmysLimb.setPower(0.15);
        frontLeft.setPower(-0.35);
        frontRight.setPower(-0.35 - 0.05);
        backLeft.setPower(0.35);
        backRight.setPower(0.35);
        sleep(2500);
        frontLeft.setPower(0.35);
        frontRight.setPower(-0.35 - 0.05);
        backLeft.setPower(-0.35);
        backRight.setPower(0.35);
        sleep(500);
        frontLeft.setPower(0);
        frontRight.setPower(0);
        backLeft.setPower(0);
        backRight.setPower(0);
        JimmysLimb.setPower(1);
        sleep(2000);
        JimmysLimb.setPower(0.15);
        frontLeft.setPower(-0.2 - 0.05);
        frontRight.setPower(-0.2);
        backLeft.setPower(0.2);
        backRight.setPower(0.2);
        sleep(820);
        frontLeft.setPower(0);
        frontRight.setPower(0);
        backLeft.setPower(0);
        backRight.setPower(0);
        oh.setPower(-1);
        sleep(2000);
        oh.setPower(0);
        frontLeft.setPower(0.2);
        frontRight.setPower(0.2 + 0.05);
        backLeft.setPower(-0.2);
        backRight.setPower(-0.2);
        sleep(820);
        JimmysLimb.setPower(0);
        frontLeft.setPower(-0.35);
        frontRight.setPower(0.35 + 0.05);
        backLeft.setPower(0.35);
        backRight.setPower(-0.35);
        sleep(600);
        frontLeft.setPower(0);
        frontRight.setPower(0);
        backLeft.setPower(0);
        backRight.setPower(0);
        stop(999999);
//Jacques, good luck! Ms. Shields
    }
    public void section3(){
        frontLeft.setPower(-0.35);
        frontRight.setPower(-0.35 - 0.05);
        backLeft.setPower(0.35);
        backRight.setPower(0.35);
        sleep(100);
        stop(1000);
        frontLeft.setPower(-0.35);
        frontRight.setPower(0.35 - 0.05);
        backLeft.setPower(-0.35);
        backRight.setPower(0.35);
        sleep(2000);
        stop(1000);
        frontLeft.setPower(-0.35);
        frontRight.setPower(-0.35 - 0.05);
        backLeft.setPower(0.35);
        backRight.setPower(0.35);
        sleep(1200);
        stop(999999999);
    }
    public void spinLeftRaw(double power) {
        frontRight.setPower(power*-1);
        backRight.setPower(power*-1);
        frontLeft.setPower(power);
        backLeft.setPower(power);
    }

    public void spinRightRaw(double power) {
        frontRight.setPower(power);
        backRight.setPower(power);
        frontLeft.setPower(power*-1);
        backLeft.setPower(power*-1);
    }

    public void strafeLeftRaw(double power) {
        frontRight.setPower(power);
        backRight.setPower(power*-1);
        frontLeft.setPower(power*-1);
        backLeft.setPower(power);
    }

    public void strafeRightRaw(double power) {
        frontRight.setPower(power*-1);
        backRight.setPower(power);
        frontLeft.setPower(power);
        backLeft.setPower(power*-1);
    }

    public void backwardRaw(double power) {
        frontRight.setPower(power*-1);
        backRight.setPower(power*-1);
        frontLeft.setPower(power*-1);
        backLeft.setPower(power*-1);
    }

    public void forwardRaw(double power) {
        frontRight.setPower(power);
        //backRight.setPower(power);
        //frontLeft.setPower(power);
        backLeft.setPower(power);
    }
    public void forwardRaw(){
        forwardRaw(1);
    }
    public void backwardRaw(){
        backwardRaw(1);
    }
    public void strafeLeftRaw(){
        strafeLeftRaw(1);
    }
    public void spinLeftRaw(){
        spinLeftRaw(1);
    }
    public void spinRightRaw(){
        spinRightRaw(1);
    }
    public void Run_without_encoder() {
        frontLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        //frontRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        //backLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        backRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    }
    public void Run_using_encoder() {
        frontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        //frontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        //backLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }
    public void Run_to_position() {
        frontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //frontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //backLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    public void Stop_and_reset_encoder() {
        frontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //frontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //backLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    }
    private void forwardE(int distance, double speed){
        Stop_and_reset_encoder();
        frontLeft.setTargetPosition(distance);
        //frontRight.setTargetPosition(distance);
        //backLeft.setTargetPosition(distance);
        backRight.setTargetPosition(distance);
        Run_to_position();
        while (frontLeft.isBusy()){
            forwardRaw(speed);
        }
    }
    @Override
    public void runOpMode() {
        frontLeft = hardwareMap.get(DcMotor.class, "frontleft");
        backLeft = hardwareMap.get(DcMotor.class, "backleft");
        frontRight = hardwareMap.get(DcMotor.class, "frontright");
        backRight = hardwareMap.get(DcMotor.class, "backright");
        JimmysLimb = hardwareMap.get(DcMotor.class, "LimboJim");
        serve = hardwareMap.get(CRServo.class, "spinnyjoe");
        oh = hardwareMap.get(CRServo.class, "spinnyjen");
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        waitForStart();
        runtime.reset();
        while (opModeIsActive()) {
            section2();
            
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.update();
        }
    }
}
